//
//  ContentView.swift
//  haxx
//
//  Created by Alfie on 11/11/2022.
//

import SwiftUI

let pipe = Pipe()

struct ExploitView: View {
    
    let originalLog = ""
    @State private var log = ""
    
    public func openConsolePipe () {
        setvbuf(stdout, nil, _IONBF, 0) //<--------- !
        dup2(pipe.fileHandleForWriting.fileDescriptor,
             STDOUT_FILENO)
        // listening on the readabilityHandler
        pipe.fileHandleForReading.readabilityHandler = { handle in
            let data = handle.availableData
            var str = String(data: data, encoding: .ascii) ?? "<Non-ascii data of size\(data.count)>\n"
            str += "\n"
            DispatchQueue.main.async {
                log += str
            }
        }
    }
    
    var body: some View {
        VStack {
            ScrollView {
                HStack {
                    Text(log)
                        .font(.system(size: 12, weight: .regular, design: .monospaced))
                        .padding()
                        .multilineTextAlignment(.leading)
                    Spacer()
                }
            }
            .frame(width: 375, height: 350)
            .border(Color(uiColor: UIColor(.primary).inverted))
            Button(action: {
                log = originalLog
                exploit()
            }, label: {
                ZStack {
                    RoundedRectangle(cornerSize: CGSize(width: 10, height: 10))
                        .foregroundColor(.green)
                        .frame(width: 300, height: 100)
                    Text("Run hax")
                        .font(.title)
                        .foregroundColor(.white)
                }
            })
            .padding()
        }
        .padding()
        .onAppear {
            openConsolePipe()
        }
    }
}


extension UIColor {
    var inverted: UIColor {
        var r: CGFloat = 0.0, g: CGFloat = 0.0, b: CGFloat = 0.0, a: CGFloat = 0.0
        self.getRed(&r, green: &g, blue: &b, alpha: &a)
        return UIColor(red: (1 - r), green: (1 - g), blue: (1 - b), alpha: a) // Assuming you want the same alpha value.
    }
}

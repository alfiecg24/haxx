//
//  ContentView.swift
//  haxx
//
//  Created by Alfie on 11/11/2022.
//

import SwiftUI
import Darwin

@discardableResult
func isSandboxed() -> Bool {
    FileManager.default.createFile(atPath: "/var/SigmaMaleAlfie/escaped.txt", contents: nil)
    do {
        print("Finding files in /var")
        for file in try FileManager.default.contentsOfDirectory(atPath: "/var") {
            print("Found: \(file)")
        }
    } catch {
        print("Error!")
    }
    print("Attempted file creation")
    if FileManager.default.fileExists(atPath: "/var/SigmaMaleAlfie/escaped.txt") {
        print("Found escaped.txt at /var/SigmaMaleAlfie/!")
        print("Removing file")
        do {
            try FileManager.default.removeItem(atPath: "/var/SigmaMaleAlfie/escaped.txt")
            print("File removed")
        } catch {
            print("Could not remove file")
        }
        return false
    } else {
        print("Could not find file")
        return true
    }
}

let pipe = Pipe()

struct ExploitView: View {
    @State private var isExploited = false
    @State private var isExploiting = false
    let originalLog = ""
    @State private var log = ""
    
    public func openConsolePipe () {
        setvbuf(stdout, nil, _IONBF, 0) //<--------- !
        dup2(pipe.fileHandleForWriting.fileDescriptor,
             STDOUT_FILENO)
        // listening on the readabilityHandler
        pipe.fileHandleForReading.readabilityHandler = { handle in
            let data = handle.availableData
            var str = String(data: data, encoding: .ascii) ?? "<Non-ascii data of size\(data.count)>\n"
            str += "\n"
            DispatchQueue.main.async {
                log += str
            }
        }
    }
    
    var body: some View {
        VStack {
            ScrollView {
                HStack {
                    Text(log)
                        .font(.system(size: 10, weight: .regular, design: .monospaced))
                        .padding()
                        .foregroundColor(.black)
                        .multilineTextAlignment(.leading)
                    Spacer()
                }
            }
            .frame(width: UIScreen.main.bounds.width*0.8, height: UIScreen.main.bounds.height*0.7)
            .border(.black)
            .padding()
            Button(action: {
                log = originalLog
//                if !isExploited {
                isExploiting = true
                //print("Running exploit: weightBufs")
                let ret = exploit()
                if ret == 0 {
                    print("Exploit success!")
                    isExploited = true
                } else {
                    print("Error in exploit")
                }
                isExploiting = false
//                } else {
//                    let res = isSandboxed()
//                    if res {
//                        print("App is sandboxed")
//                    } else {
//                        print("App has escaped the sandbox!")
//                    }
//                }
            }, label: {
                ZStack {
                    RoundedRectangle(cornerSize: CGSize(width: 10, height: 10))
                        .foregroundColor(.green)
                        .frame(width: 300, height: 100)
                    Text("Run haxx")
                        .font(.title)
                        .foregroundColor(.white)
                }
            })
            .padding()
            .disabled(isExploiting)
        }
        .padding()
        .onAppear {
            openConsolePipe()
        }
    }
}


extension UIColor {
    var inverted: UIColor {
        var r: CGFloat = 0.0, g: CGFloat = 0.0, b: CGFloat = 0.0, a: CGFloat = 0.0
        self.getRed(&r, green: &g, blue: &b, alpha: &a)
        return UIColor(red: (1 - r), green: (1 - g), blue: (1 - b), alpha: a) // Assuming you want the same alpha value.
    }
}
